{
    "entry_point": "rcpsp_preemptive_problem:RCPSPPreemptiveProblem",
    "default_params": {
      "instance_file": "instances/Pat1.rcp"
    },
    "problem_type": "Preemptive Resource Constrained Project Scheduling",
    "description": "In the preemptive RCPSP (using a pseudo-preemption model), a project consists of tasks that may be split into a fixed maximum number of subtasks. Each task has a given duration and consumes specified amounts of renewable resources while processing. Precedence constraints require that each task finishes before its successors begin. Additionally, at every time unit the total resource consumption of concurrently running tasks must not exceed available capacities. The objective is to minimize the makespan (the maximum finishing time among all tasks).",
    "keywords": [
      "RCPSP",
      "scheduling",
      "preemption",
      "resource constraints"
    ],
    "data_format": {
      "instance_file": {
        "format": "A text file in the Patterson format. The first line contains the number of tasks and the number of renewable resources. The second line contains the capacities for each resource. From the third line, each line describes a task: the task's duration, followed by the resource requirements (one per resource), the number of successors, and the list of successor task IDs (1-indexed, converted to 0-indexed)."
      }
    },
    "decision_variables": {
      "schedule": {
        "type": "list of lists of intervals",
        "description": "A list of length equal to the number of tasks. Each element is a list (of up to max_nb_preemptions intervals) representing the subtask intervals for that task, where each interval is given as a tuple (start, end)."
      }
    },
    "objective": {
      "type": "minimization",
      "function": "Makespan = max_{i in tasks} (end time of last subtask of task i)",
      "description": "Minimize the project makespan, defined as the maximum finishing time over all tasks. Each task's intervals must sum to its total duration, must be non-overlapping and in order, and all precedence and cumulative resource constraints must be satisfied."
    },
    "solution_representation": "A dictionary with key 'schedule' mapping to a list of task schedules, where each task schedule is a list of intervals (tuples) representing its execution periods.",
    "compatible_optimizers": [
      "genetic_algorithm",
      "simulated_annealing",
      "particle_swarm",
      "tabu_search"
    ]
  }
  